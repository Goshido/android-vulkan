[[vk::binding ( 0, 1 )]]
Texture2D<float4>       g_diffuseTexture:       register ( t0 );

[[vk::binding ( 1, 1 )]]
SamplerState            g_diffuseSampler:       register ( s0 );

[[vk::binding ( 2, 1 )]]
Texture2D<float4>       g_emissionTexture:      register ( t1 );

[[vk::binding ( 3, 1 )]]
SamplerState            g_emissionSampler:      register ( s1 );

[[vk::binding ( 4, 1 )]]
Texture2D<float4>       g_normalTexture:        register ( t2 );

[[vk::binding ( 5, 1 )]]
SamplerState            g_normalSampler:        register ( s2 );

[[vk::binding ( 6, 1 )]]
Texture2D<float4>       g_paramTexture:         register ( t3 );

[[vk::binding ( 7, 1 )]]
SamplerState            g_paramSampler:         register ( s3 );

struct InputData
{
    [[vk::location ( 0 )]]
    linear half2        _uv:                    UV;

    [[vk::location ( 1 )]]
    linear half3        _normalView:            NORMAL;

    [[vk::location ( 2 )]]
    linear half3        _tangentView:           TANGENT;

    [[vk::location ( 3 )]]
    linear half3        _bitangentView:         BITANGENT;
};

struct OutputData
{
    float4              _albedo:                SV_Target0;
    float4              _emission:              SV_Target1;
    float4              _normal:                SV_Target2;
    float4              _param:                 SV_Target3;
};

//----------------------------------------------------------------------------------------------------------------------

half3 GetFinalNormalView ( in half3 tangentView, in half3 bitangentView, in half3 normalView, in float2 uv )
{
    const half3 normalData = (half3)g_normalTexture.Sample ( g_normalSampler, uv ).xyz * 2.0h - 1.0h;
    const half3x3 tbnView = half3x3 ( tangentView, bitangentView, normalView );
    return normalize ( mul ( normalData, tbnView ) );
}

float4 PackUnitVector ( in half3 v )
{
    float4 result;
    result.xyz = (float3)( v * 0.5h + 0.5h );
    result.w = 0.5f;
    return result;
}

OutputData PS ( in InputData inputData )
{
    const float2 uv = (float2)inputData._uv;

    OutputData result;

    result._albedo = g_diffuseTexture.Sample ( g_diffuseSampler, uv );
    result._emission = g_emissionTexture.Sample ( g_emissionSampler, uv );
    result._param = g_paramTexture.Sample ( g_paramSampler, uv );

    result._normal = PackUnitVector (
        GetFinalNormalView ( inputData._tangentView, inputData._bitangentView, inputData._normalView, uv )
    );

    return result;
}
