#include "lightup-common.ps"
#include "point_light.inc"


// The implementation is based on ideas from LearnOpenGL resource
// see https://learnopengl.com/PBR/Theory
// see https://learnopengl.com/PBR/Lighting

#define EPSILON             1.0e-3H

#define PI                  3.141592H
#define INVERSE_PI          0.31830H

// It was set by empirical test.
#define SHADOW_MAP_BIAS     9.9e-1F

[[vk::binding ( BIND_SHADOWMAP_TEXTURE, SET_LIGHT_DATA )]]
TextureCube<float32_t>      g_shadowmap:    register ( t0 );

[[vk::binding ( BIND_SHADOWMAP_SAMPLER, SET_LIGHT_DATA )]]
SamplerComparisonState      g_sampler:      register ( s0 );

[[vk::binding ( BIND_LIGHT_DATA, SET_LIGHT_DATA )]]
cbuffer LightData:                          register ( b2 )
{
    float32_t4x4            _lightProjection;
    float32_t4x4            _viewToLight;

    float32_t3              _lightLocationView;

    // Must be equal: 1.0F / units-per-meter
    float32_t               _sceneScaleFactor;

    float32_t3              _hue;
    float32_t               _intensity;
};

struct OutputData
{
    [[vk::location ( 0 )]]
    float32_t4              _color:         SV_Target0;
};

//----------------------------------------------------------------------------------------------------------------------

float16_t3 GetDiffuseK ( in float16_t3 fesnelFactor, in float16_t metallic )
{
    return ( 1.0H - fesnelFactor ) * ( 1.0H - metallic );
}

float16_t GetDirectK ( in float16_t roughness )
{
    const float16_t alpha = roughness + 1.0H;
    return alpha * alpha * 0.125H;
}

float16_t GGXSchlick ( in float16_t dotFactor, in float16_t k )
{
    return dotFactor / mad ( dotFactor, 1.0H - k, k );
}

float16_t GetAttenuation ( in float32_t3 fragToLight )
{
    const float16_t beta = (float16_t)max ( 1.0F, _sceneScaleFactor * length ( fragToLight ) );
    return (float16_t)_intensity / ( beta * beta );
}

float16_t GetDistribution ( in float16_t nH, in float16_t roughness )
{
    const float16_t alpha = roughness * roughness;
    const float16_t beta = alpha * alpha;
    const float16_t gamma = nH * nH;
    const float16_t zeta = mad ( gamma, beta - 1.0H, 1.0H );

    return beta / ( PI * zeta * zeta );
}

float16_t GetGeometryAttenuation ( in float16_t nL, in float16_t nV, in float16_t roughness )
{
    const float16_t k = GetDirectK ( roughness );
    return GGXSchlick ( nL, k ) * GGXSchlick ( nV, k );
}

float16_t GetShadowFactor ( in float32_t3 locationView )
{
    const float32_t3 dir = mul ( _viewToLight, float32_t4 ( locationView, 1.0F ) ).xyz * SHADOW_MAP_BIAS;
    const float32_t3 faceSelector = abs ( dir );
    const float32_t z = max ( faceSelector.x, max ( faceSelector.y, faceSelector.z ) );
    const float32_t4 cvv = mul ( _lightProjection, float32_t4 ( 0.0F, 0.0F, z, 1.0F ) );

    return (float16_t)g_shadowmap.SampleCmpLevelZero ( g_sampler, dir, cvv.z / cvv.w );
}

float32_t3 RestoreLocationView ( in float32_t2 locationImage )
{
    const float32_t2 alpha = mad ( locationImage, _invResolutionFactor, (float32_t2)( -1.0F ) );
    const float32_t4 v = mul ( _cvvToView, float32_t4 ( alpha, GetDepth (), 1.0F ) );
    return v.xyz * ( 1.0F / v.w );
}

//----------------------------------------------------------------------------------------------------------------------

OutputData PS ( in linear float32_t4 pixel: SV_Position )
{
    const float32_t3 locationView = RestoreLocationView ( pixel.xy );
    const float32_t3 fragToLight = _lightLocationView - locationView;

    const float16_t attenuation = GetAttenuation ( fragToLight );
    const float16_t3 toViewerView = -normalize ( (float16_t3)locationView );
    const float16_t3 toLightView = normalize ( (float16_t3)fragToLight );
    const float16_t3 halfVectorView = normalize ( toLightView + toViewerView );
    const float16_t3 normalView = RestoreNormalView ();

    float16_t roughness;
    float16_t metallic;
    GetParams ( roughness, metallic );

    const float16_t3 albedo = GetAlbedo ();

    const float16_t nL = max ( 0.0H, dot ( normalView, toLightView ) );
    const float16_t nH = max ( 0.0H, dot ( normalView, halfVectorView ) );
    const float16_t nV = max ( 0.0H, dot ( normalView, toViewerView ) );

    const float16_t d = GetDistribution ( nH, roughness );
    const float16_t3 f = GetFresnel ( nH, metallic, albedo );
    const float16_t ga = GetGeometryAttenuation ( nL, nV, roughness );
    const float16_t shadow = GetShadowFactor ( locationView );
    const float16_t3 kD = GetDiffuseK ( f, metallic );

    const float16_t3 specular = f * d * ga / ( max ( EPSILON, 4.0H * nL * nV ) );
    const float16_t3 color = shadow * nL * attenuation * (float16_t3)_hue * mad ( kD * albedo, INVERSE_PI, specular );

    OutputData result;
    result._color = float32_t4 ( (float32_t3)color, 1.0F );

    return result;
}
