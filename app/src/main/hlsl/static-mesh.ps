[[ vk::binding ( 1 ) ]]
Texture2D<float4>       g_diffuseTexture:       register ( t0 );

[[ vk::binding ( 2 ) ]]
SamplerState            g_textureSampler:       register ( s0 );

[[ vk::binding ( 3 ) ]]
Texture2D<float4>       g_normalTexture:        register ( t1 );

[[ vk::binding ( 4 ) ]]
SamplerState            g_normalSampler:        register ( s1 );

struct InputData
{
    [[ vk::location ( 0 ) ]]
    linear float3       _fragmentView:          FRAGMENT;

    [[ vk::location ( 1 ) ]]
    linear half2        _uv:                    UV;

    [[ vk::location ( 2 ) ]]
    linear half3        _normalView:            NORMAL;

    [[ vk::location ( 3 ) ]]
    linear half3        _tangentView:           TANGENT;

    [[ vk::location ( 4 ) ]]
    linear half3        _bitangentView:         BITANGENT;
};

//----------------------------------------------------------------------------------------------------------------------

float4 PS ( [[ vk::location ( 0 ) ]] in InputData inputData ): SV_Target0
{
    const float2 uv = (float2)inputData._uv;

    const float4 diffuseData = g_diffuseTexture.Sample ( g_textureSampler, uv );
    const half3 normalData = (half3)g_normalTexture.Sample ( g_normalSampler, uv ).xyz * 2.0h - 1.0h;

    const half3x3 tbnView = half3x3 ( inputData._tangentView, inputData._bitangentView, inputData._normalView );
    const half3 normalView = normalize ( mul ( normalData, tbnView ) );

    const half3 toView = -(half3)normalize ( inputData._fragmentView );
    const float lambertian = (float)max ( 0.0h, dot ( toView, normalView ) );

    return diffuseData * lambertian;
}
