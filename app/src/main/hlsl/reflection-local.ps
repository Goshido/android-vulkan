#include "reflection-common.ps"

[[vk::binding ( 1, 2 )]]
cbuffer LightData:      register ( b2 )
{
    float32_t3      _locationView;
    float32_t       _invSize;
};

//----------------------------------------------------------------------------------------------------------------------

float16_t GetAttenuation ( in float32_t3 fragmentView )
{
    const float16_t alpha = (float16_t)min ( 1.0F, _invSize * distance ( _locationView, fragmentView ) );
    return mad ( alpha, -alpha, 1.0H );
}

OutputData PS ( in linear float32_t4 pixel: SV_Position )
{
    OutputData result;

    const float32_t4 alpha = RestoreLocationViewUnnormalized ( pixel.xy, GetDepth () );
    const float32_t3 fragmentView = alpha.xyz * ( 1.0F / alpha.w );

    const float16_t3 reflection = GetReflection ( (float16_t3)normalize ( fragmentView ) );
    const float16_t attenuation = GetAttenuation ( fragmentView );

    result._color = float32_t4 ( (float32_t3)( reflection * attenuation ), 0.0F );
    return result;
}
