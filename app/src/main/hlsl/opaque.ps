#include "instance-layout.inc"


[[vk::binding ( 0, 0 )]]
Texture2D<float4>           g_diffuseTexture:       register ( t0 );

[[vk::binding ( 1, 0 )]]
SamplerState                g_diffuseSampler:       register ( s0 );

[[vk::binding ( 2, 0 )]]
Texture2D<float4>           g_emissionTexture:      register ( t1 );

[[vk::binding ( 3, 0 )]]
SamplerState                g_emissionSampler:      register ( s1 );

[[vk::binding ( 4, 0 )]]
Texture2D<float4>           g_maskTexture:          register ( t2 );

[[vk::binding ( 5, 0 )]]
SamplerState                g_maskSampler:          register ( s2 );

[[vk::binding ( 6, 0 )]]
Texture2D<float4>           g_normalTexture:        register ( t3 );

[[vk::binding ( 7, 0 )]]
SamplerState                g_normalSampler:        register ( s3 );

[[vk::binding ( 8, 0 )]]
Texture2D<float4>           g_paramTexture:         register ( t4 );

[[vk::binding ( 9, 0 )]]
SamplerState                g_paramSampler:         register ( s4 );


struct InputData
{
    [[vk::location ( 0 )]]
    linear half2            _uv:                    UV;

    [[vk::location ( 1 )]]
    linear half3            _normalView:            NORMAL;

    [[vk::location ( 2 )]]
    linear half3            _tangentView:           TANGENT;

    [[vk::location ( 3 )]]
    linear half3            _bitangentView:         BITANGENT;

    [[vk::location ( 4 )]]
    nointerpolation uint    _instanceIndex:         INSTANCE_INDEX;
};

struct OutputData
{
    float4                  _albedo:                SV_Target0;
    float4                  _emission:              SV_Target1;
    float4                  _normal:                SV_Target2;
    float4                  _param:                 SV_Target3;
};

//----------------------------------------------------------------------------------------------------------------------

half3 GetFinalNormalView ( in half3 tangentView, in half3 bitangentView, in half3 normalView, in float2 uv )
{
    const half3 normalData = (half3)g_normalTexture.Sample ( g_normalSampler, uv ).xyz * 2.0h - 1.0h;
    const half3x3 tbnView = half3x3 ( tangentView, bitangentView, normalView );
    return normalize ( mul ( normalData, tbnView ) );
}

float4 PackUnitVector ( in half3 v )
{
    float4 result;
    result.xyz = (float3)( v * 0.5h + 0.5h );
    result.w = 0.5f;
    return result;
}

OutputData PS ( in InputData inputData )
{
    const float2 uv = (float2)inputData._uv;

    float3 maskSample = g_maskTexture.Sample ( g_maskSampler, uv ).xyz;
    const float maskSum = maskSample.x + maskSample.y + maskSample.z;

    if ( maskSum > 1.0F )
        maskSample *= 1.0F / maskSum;

    const ObjectData objectData = g_instanceData[ inputData._instanceIndex ];

    float3 albedoOverlay = (float3)max ( 1.0F - maskSum, 0.0F );
    albedoOverlay += objectData._color0.xyz * maskSample.x;
    albedoOverlay += objectData._color1.xyz * maskSample.y;
    albedoOverlay += objectData._color2.xyz * maskSample.z;

    OutputData result;

    result._albedo = float4 ( albedoOverlay * g_diffuseTexture.Sample ( g_diffuseSampler, uv ).xyz, 1.0F );
    result._emission = g_emissionTexture.Sample ( g_emissionSampler, uv );
    result._param = g_paramTexture.Sample ( g_paramSampler, uv );

    result._normal = PackUnitVector (
        GetFinalNormalView ( inputData._tangentView, inputData._bitangentView, inputData._normalView, uv )
    );

    return result;
}
