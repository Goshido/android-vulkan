apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"
    ndkVersion "22.1.7171670"

    defaultConfig {
        applicationId "com.goshido.android_vulkan"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    // Release stuff and certificates. No hardcode. All delegates to the user environment.
    // Based on https://gist.github.com/lifuzu/9822276
    signingConfigs {
        release {
            storeFile file(System.getenv('ANDROID_VULKAN_CERTIFICATE_STORE_FILE'))
            storePassword System.getenv('ANDROID_VULKAN_CERTIFICATE_STORE_PASSWORD')
            keyAlias System.getenv('ANDROID_VULKAN_CERTIFICATE_KEY_ALIAS')
            keyPassword System.getenv('ANDROID_VULKAN_CERTIFICATE_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            ndk {
                abiFilters "arm64-v8a"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path file('../CMakeLists.txt')
            version "3.18.1"
        }
    }

    // See https://developer.android.com/ndk/guides/graphics/validation-layer#apk-containing-layers
    sourceSets {
        main {
            ext.makeVulkanLayerPath = { ->
                return buildDir.toString() + "/vulkan-debug-layers"
            }

            jniLibs {
                srcDir makeVulkanLayerPath()
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

// Automation for building result APK with Vulkan's debug layer libraries from Android NDK.

ext.getVulkanLayerSourceDirectory = { ->
    return "sources/third_party/vulkan/src/build-android/jniLibs"
}

ext.getVulkanLayerTargetDirectory = { ->
    return "vulkan-debug-layers"
}

ext.getVulkanDebugLayerFilter = { ->
    return "**/libVkLayer_khronos_validation.so"
}

// Custom task to copy .so family from Android NDK.
task copyVulkanLayerLib(type: Copy) {
    from(new File(android.ndkDirectory, getVulkanLayerSourceDirectory())) { include getVulkanDebugLayerFilter() }
    into new File(buildDir, getVulkanLayerTargetDirectory())
}

// Inject copyVulkanLayerLib to build graph.
preBuild.dependsOn copyVulkanLayerLib
