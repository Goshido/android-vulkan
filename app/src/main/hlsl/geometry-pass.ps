#ifndef GEOMETRY_PASS_PS
#define GEOMETRY_PASS_PS


#include "object-data.inc"


[[vk::binding ( BIND_SAMPLER, SET_SAMPLER )]]
SamplerState                        g_sampler:              register ( s0 );

[[vk::binding ( BIND_DIFFUSE_TEXTURE, SET_MATERIAL )]]
Texture2D<float32_t4>               g_diffuseTexture:       register ( t0 );

[[vk::binding ( BIND_EMISSION_TEXTURE, SET_MATERIAL )]]
Texture2D<float32_t4>               g_emissionTexture:      register ( t1 );

[[vk::binding ( BIND_MASK_TEXTURE, SET_MATERIAL )]]
Texture2D<float32_t4>               g_maskTexture:          register ( t2 );

[[vk::binding ( BIND_NORMAL_TEXTURE, SET_MATERIAL )]]
Texture2D<float32_t4>               g_normalTexture:        register ( t3 );

[[vk::binding ( BIND_PARAMS_TEXTURE, SET_MATERIAL )]]
Texture2D<float32_t4>               g_paramTexture:         register ( t4 );

struct InputData
{
    [[vk::location ( ATT_SLOT_UV )]]
    linear float32_t2               _uv:                    UV;

    [[vk::location ( ATT_SLOT_NORMAL_VIEW )]]
    linear float32_t3               _normalView:            NORMAL;

    [[vk::location ( ATT_SLOT_TANGENT_VIEW )]]
    linear float32_t3               _tangentView:           TANGENT;

    [[vk::location ( ATT_SLOT_BITANGENT_VIEW )]]
    linear float32_t3               _bitangentView:         BITANGENT;

    [[vk::location ( ATT_SLOT_INSTANCE_INDEX )]]
    nointerpolation uint32_t        _instanceIndex:         INSTANCE_INDEX;

    linear float4                   _vertexH:               SV_Position;
};

struct OutputData
{
    float32_t4                      _albedo:                SV_Target0;
    float32_t4                      _emission:              SV_Target1;
    float32_t4                      _normal:                SV_Target2;
    float32_t4                      _param:                 SV_Target3;
};

//----------------------------------------------------------------------------------------------------------------------

float32_t3 GetFinalNormalView ( in float32_t3 tangentView,
    in float32_t3 bitangentView,
    in float32_t3 normalView,
    in float32_t2 uv
)
{
    const float32_t2 normalData = mad ( g_normalTexture.Sample ( g_sampler, uv ).xw,
        (float32_t2)2.0F,
        (float32_t2)( -1.0F )
    );

    const float32_t3x3 tbnView = float32_t3x3 ( tangentView, bitangentView, normalView );

    // DISCLAIMER: You might guess it's a good idea for optimization to not perform normalize operation here.
    // In reality it's bad idea. In fact you will see noticeable artifacts with specular on the light-up pass.
    // And you will NOT see any performance benefits in terms of FPS on real game scenes.
    // Trust me. I tried (2021-01-27)...
    return normalize ( mul ( float32_t3 ( normalData.xy, 1.0F ), tbnView ) );
}

float32_t4 PackUnitVector ( in float32_t3 v )
{
    return float32_t4 ( mad ( v, 0.5F, 0.5F ), 0.5F );
}

OutputData FillGBuffer ( in InputData inputData, in ObjectData objectData, in float32_t3 diffuseSample )
{
    float32_t3 maskSample = g_maskTexture.Sample ( g_sampler, inputData._uv ).xyz;
    const float32_t maskSum = maskSample.x + maskSample.y + maskSample.z;

    if ( maskSum > 1.0F )
        maskSample *= 1.0F / maskSum;

    float32_t3 albedoOverlay = (float32_t3)max ( 1.0F - maskSum, 0.0F );
    albedoOverlay = mad ( objectData._color0.xyz, maskSample.x, albedoOverlay );
    albedoOverlay = mad ( objectData._color1.xyz, maskSample.y, albedoOverlay );
    albedoOverlay = mad ( objectData._color2.xyz, maskSample.z, albedoOverlay );

    OutputData result;

    result._albedo = float32_t4 ( albedoOverlay * diffuseSample, 1.0F );

    result._emission = float32_t4 (
        g_emissionTexture.Sample ( g_sampler, inputData._uv ).xyz * objectData._emission.xyz,
        1.0F
    );

    result._param = g_paramTexture.Sample ( g_sampler, inputData._uv );

    result._normal = PackUnitVector (
        GetFinalNormalView ( inputData._tangentView, inputData._bitangentView, inputData._normalView, inputData._uv )
    );

    return result;
}


#endif // GEOMETRY_PASS_PS
